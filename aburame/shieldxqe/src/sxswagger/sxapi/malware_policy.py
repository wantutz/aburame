#!/usr/bin/python

#/*
#* ShieldX Networks Inc. CONFIDENTIAL
#* ----------------------------------
#*
#* Copyright (c) 2016 ShieldX Networks Inc.
#* All Rights Reserved.
#*
#* NOTICE:  All information contained herein is, and remains
#* the property of ShieldX Networks Incorporated and its suppliers,
#* if any.  The intellectual and technical concepts contained
#* herein are proprietary to ShieldX Networks Incorporated
#* and its suppliers and may be covered by U.S. and Foreign Patents,
#* patents in process, and are protected by trade secret or copyright law.
#* Dissemination of this information or reproduction of this material
#* is strictly forbidden unless prior written permission is obtained
#* from ShieldX Networks Incorporated.
#*/

# Author: Juan
# Policy Management
#     Malware

# standard library

# 3rd party library
import json
import requests

# shieldx library
from sxswagger.common.custom_logger import CustomLogger
from sxswagger.common.rest_call import RestCall

class MalwarePolicy(object):
    def __init__(self, rest_session):
        # singleton logger
        self.logger = CustomLogger().get_logger()

        # REST Session
        self.rest_session = rest_session

        # Common REST Calls
        self.rest_call = RestCall(rest_session)

        # URLs - Malware
        self.malware_url = "policy/malwarepolicy"
        self.malware_engines_config_url = "manage/malwareenginesconfig"

    def get_policies(self):
        # Malware Policies
        policies = None

        # Craft the URL
        url = self.rest_session.base_url + self.malware_url

        # Headers
        headers = self.rest_session.headers

        # List Policies - GET
        response = self.rest_call.get_query(
                       url = url,
                       headers = headers,
                       verify = False
                   )

        # Convert response to expected data
        if response.status_code == requests.codes.ok:
            policies = list(response.json())
        else:
            pass

        return policies

    def get_policy_by_name(self, policy_name):
        # Malware Policy
        malware_policy = None

        # Craft the URL
        url = self.rest_session.base_url + self.malware_url

        # Headers
        headers = self.rest_session.headers

        # List Policies - GET
        response = self.rest_call.get_query(
                       url = url,
                       headers = headers,
                       verify = False
                   )

        # Convert response to expected data
        if response.status_code == requests.codes.ok:
            policies = list(response.json())

            for policy in policies:
                if policy_name == policy["name"]:
                    malware_policy = policy
                    break
                else:
                    continue
        else:
            pass

        return malware_policy

    def get_policy_by_id(self, policy_id):
        # Malware Policy
        malware_policy = None

        # Craft the URL
        url = self.rest_session.base_url + self.malware_url

        # Headers
        headers = self.rest_session.headers

        # List Policies - GET
        response = self.rest_call.get_query(
                       url = url,
                       headers = headers,
                       verify = False
                   )

        # Convert response to expected data
        if response.status_code == requests.codes.ok:
            policies = list(response.json())

            for policy in policies:
                if policy_id == policy["id"]:
                    malware_policy = policy
                    break
                else:
                    continue
        else:
            pass

        return malware_policy

    def set_malware_config(self, malware_config):
        # Action
        is_updated = False

        # Craft the URL
        url = self.rest_session.base_url + self.malware_engines_config_url

        # Headers
        headers = self.rest_session.headers

        # Payload
        data = json.dumps(malware_config)

        # Update ACL - PUT
        response = self.rest_call.put_query(
                       url = url,
                       headers = headers,
                       data = data,
                       verify = False
                   )

        # Convert response to expected data
        if response.status_code == requests.codes.ok:
            is_updated = True
        else:
            pass

        return is_updated

    def create_policy(self, policy):
        # Policy ID
        policy_id = 0

        # Craft the URL
        url = self.rest_session.base_url + self.malware_url

        # Headers
        headers = self.rest_session.headers

        # Data
        data = json.dumps(policy)

        # Create malware policy - POST
        response = self.rest_call.post_query(
                       url = url,
                       headers = headers,
                       data = data,
                       verify = False
                   )

        # Convert response to expected data
        if response.status_code == requests.codes.ok:
            policy_id = int(response.json())
        else:
            pass

        return policy_id

    def update_policy(self, policy):
        # Policy ID
        policy_id = 0

        # Craft the URL
        url = self.rest_session.base_url + self.malware_url

        # Headers
        headers = self.rest_session.headers

        # Data
        data = json.dumps(policy)

        # Update malware policy - PUT
        response = self.rest_call.put_query(
                       url = url,
                       headers = headers,
                       data = data,
                       verify = False
                   )

        # Convert response to expected data
        if response.status_code == requests.codes.ok:
            policy_id = int(response.json())
        else:
            pass

        return policy_id

    def delete_policy(self, policy_id):
        # Action
        is_deleted = False

        # Craft the URL
        url = self.rest_session.base_url + self.malware_url + "/" + str(policy_id)

        # Headers
        headers = self.rest_session.headers

        # Delete malware policy - DELETE
        response = self.rest_call.delete_query(
                       url = url,
                       headers = headers,
                       verify = False
                   )

        # Convert response to expected data
        if response.status_code == requests.codes.ok:
            is_deleted = True
        else:
            pass

        return is_deleted

if __name__ == "__main__":
    pass
