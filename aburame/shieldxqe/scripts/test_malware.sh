#!/bin/bash

# Host where script will run
test_manager=172.16.27.110

# Target UM, and account info
um=172.16.27.73
user=sxapi
pass=Admin@123

# Malware Engine API Key
malware_key=<xxx>

# Eval license is needed for SX Cloud
license=<eval license>

# Connect to Test Manager
ssh -l root $test_manager <<END

# Activate Virtual Environment
source /root/abu_env/bin/activate

# Go to Automation directory
cd /root/ShieldX/Automation

##### Use case
# Malware Strikes - "With FE Cloud" OR "With SX Cloud" OR "With FE Appliance (currently not available)"

##### 0. Collect Only - Get test names to be used for individual tests
python3 -m pytest shieldxqe/test/func/test_malware.py -v --setup-show -s --um $um --username $user --password $pass --collect-only
python3 -m pytest shieldxqe/test/func/test_strikes.py -v --setup-show -s --um $um --username $user --password $pass --collect-only
python3 -m pytest shieldxqe/test/func/test_license.py -v --setup-show -s --um $um --username $user --password $pass --collect-only
python3 -m pytest shieldxqe/test/func/test_sut.py -v --setup-show -s --um $um --username $user --password $pass --collect-only

# Activate license - Eval unlimited
python3 -m pytest shieldxqe/test/func/test_license.py -v --setup-show -s --um $um --username $user --password $pass -k eval_unli

# Use SPS = All Inclusive
python3 -m pytest shieldxqe/test/func/test_sut.py -v --setup-show -s --um $um --username $user --password $pass -k Inclusive

##### 1. Malware Section
# Initialization - Malware Engine
if [[ $MALWARE_ENGINE = "FECLOUD" ]]; then
    # Use FECLOUD
    echo "Malware Engine - FE Cloud"
    # Initialization - Enable FireEye Malware Engine
    python3 -m pytest shieldxqe/test/func/test_malware.py -v --setup-show -s --um $um --username $user --password $pass --malware_key $malware_key -k test_enable_fireeye_malware_engine

    # Initialization - Malware Policy Configuration
    if [[ $MALWARE_BLOCKING = true ]]; then
        # ENABLED - BLOCKING and ALERTING of Malicious Files
        echo "Malware test - blocking ENABLED"
        # ("WithSXCloud", {"alerting": "HIGH", "blocking": "HIGH", "syslog": "HIGH", "malware_engine": "FECLOUD"})
        python3 -m pytest shieldxqe/test/func/test_malware.py -v --setup-show -s --um $um --username $user --password $pass -k test_update_malware_policy[WithSXCloud-policy_components1]
    else
        # DISABLED - BLOCKING and ALERTING of Malicious Files
        echo "Malware test - blocking DISABLED"
        # ("WithSXCloud", {"alerting": "NEVER", "blocking": "NEVER", "syslog": "NEVER", "malware_engine": "FECLOUD"})
        python3 -m pytest shieldxqe/test/func/test_malware.py -v --setup-show -s --um $um --username $user --password $pass -k test_update_malware_policy[WithSXCloud-policy_components3]
    fi
elif  [[ $MALWARE_ENGINE = "FEAPPLIANCE" ]]; then
    # Use FireEye Appliance
    echo "Malware Engine - FE Appliance"
    echo "WARNING: Currently not available - no FE Appliance!!!"

    # Malware blocking here with appropriate engine
else
    # Use SXCLOUD (Default Malware Engine)
    echo "Malware Engine - SX Cloud"
    # Initialization - Enable FireEye Malware Engine
    python3 -m pytest shieldxqe/test/func/test_malware.py -v --setup-show -s --um $um --username $user --password $pass -k test_enable_shieldx_malware_engine

    # Initialization - Malware Policy Configuration
    if [[ $MALWARE_BLOCKING = true ]]; then
        # ENABLED - BLOCKING and ALERTING of Malicious Files
        echo "Malware test - blocking ENABLED"
        # ("WithSXCloud", {"alerting": "HIGH", "blocking": "HIGH", "syslog": "HIGH", "malware_engine": "SXCLOUD"})
        python3 -m pytest shieldxqe/test/func/test_malware.py -v --setup-show -s --um $um --username $user --password $pass -k test_update_malware_policy[WithSXCloud-policy_components2]
    else
        # DISABLED - BLOCKING and ALERTING of Malicious Files
        echo "Malware test - blocking DISABLED"
        # ("WithSXCloud", {"alerting": "NEVER", "blocking": "NEVER", "syslog": "NEVER", "malware_engine": "SXCLOUD"})
        python3 -m pytest shieldxqe/test/func/test_malware.py -v --setup-show -s --um $um --username $user --password $pass -k test_update_malware_policy[WithSXCloud-policy_components4]
    fi
fi


if [[ $RUN_BP_TEST = true ]]; then
    echo "Run BP Traffic - Malware Strikes Test"

    ##### 4. Malware Strikes Test
    python3 -m pytest shieldxqe/test/func/test_strikes.py -v --setup-show -s --um $um --username $user --password $pass -k test_strikes_malware
else
    echo "No traffic."
fi


# Deactivate Virtual Environment
deactivate

# Test END
END
