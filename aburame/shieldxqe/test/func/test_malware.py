# standard library
import copy
import json
import pytest
import time

# shieldx - policy management
from sxswagger.sxapi.policy_management import Malware as MalwareMgmt

# shieldx - system management
from sxswagger.sxapi.system_management import SystemManagement as SysMgmt

# shieldx - ixia management
from sxswagger.ixia.breaking_point import BreakingPoint
from sxswagger.ixia.real_time_stats import RealTimeStats as RTS

# shieldx - common
from sxswagger.common.custom_config_reader import CustomConfigReader as CCR
from sxswagger.common.custom_results import CustomResults as ResultsMgmt

@pytest.mark.strikes_testing
def test_enable_shieldx_malware_engine(
    sut_handle,
    shieldx_constants, shieldx_logger,
    datadir
):
    # Initialize
    # DUT
    malware_mgmt = MalwareMgmt(sut_handle)

    # JSON Config Reader
    config_reader = CCR()
    malware_json = "malware.json"

    # Malware Payload - read config file
    resolved_input_json_file = str((datadir/malware_json).resolve())
    malware_payloads = dict(config_reader.read_json_config(resolved_input_json_file))

    # Malware Engine payload
    payload = malware_payloads["malware_engines_payload"]
    shieldx_logger.info("Malware Engines Payload - Template: {}".format(payload))
    payload["sxCloudEnabled"] = "true"
    shieldx_logger.info("Malware Engines Payload - Enable: {}".format(payload))

    is_updated = malware_mgmt.set_malware_config(payload)
    shieldx_logger.info("Set Malware Config: {}".format(is_updated))

@pytest.mark.strikes_testing
def test_enable_fireeye_malware_engine(
    sut_handle,
    shieldx_constants, shieldx_logger,
    datadir, pytestconfig
):
    # Initialize
    # DUT
    malware_mgmt = MalwareMgmt(sut_handle)

    #### Malware Engine API Key
    feye_api_key = pytestconfig.getoption("malware_key")
    assert feye_api_key is not None, "Malware Engine API Key is required."

    # JSON Config Reader
    config_reader = CCR()
    malware_json = "malware.json"

    # Malware Payload - read config file
    resolved_input_json_file = str((datadir/malware_json).resolve())
    malware_payloads = dict(config_reader.read_json_config(resolved_input_json_file))

    # Malware Engine payload
    payload = malware_payloads["malware_engines_payload"]
    shieldx_logger.info("Malware Engines Payload - Template: {}".format(payload))
    payload["feCloudKey"] = feye_api_key
    payload["feCloudEnabled"] = "true"
    shieldx_logger.info("Malware Engines Payload - Enable: {}".format(payload))

    is_updated = malware_mgmt.set_malware_config(payload)
    shieldx_logger.info("Set Malware Config: {}".format(is_updated))

@pytest.mark.strikes_testing
def test_disable_all_malware_engine(
    sut_handle,
    shieldx_constants, shieldx_logger,
    datadir, pytestconfig
):
    # Initialize
    # DUT
    malware_mgmt = MalwareMgmt(sut_handle)

    # JSON Config Reader
    config_reader = CCR()
    malware_json = "malware.json"

    # Malware Payload - read config file
    resolved_input_json_file = str((datadir/malware_json).resolve())
    malware_payloads = dict(config_reader.read_json_config(resolved_input_json_file))

    # Malware Engine payload
    payload = malware_payloads["malware_engines_payload"]
    shieldx_logger.info("Malware Engines Payload - Template: {}".format(payload))
    payload["feCloudKey"] = "null"
    payload["feCloudEnabled"] = "false"
    payload["sxCloudEnabled"] = "false"
    shieldx_logger.info("Malware Engines Payload - Disable: {}".format(payload))

    is_updated = malware_mgmt.set_malware_config(payload)
    shieldx_logger.info("Set Malware Config: {}".format(is_updated))

@pytest.mark.strikes_testing
@pytest.mark.parametrize(
    "policy_name, policy_components", [
        ("WithFECloud", {"alerting": "CLEAN", "blocking": "CLEAN", "syslog": "CLEAN", "malware_engine": "FECLOUD"}),
        ("WithFEAppliance", {"alerting": "HIGH", "blocking": "HIGH", "syslog": "HIGH", "malware_engine": "FEAPPLIANCE"}),
    ]
)
def test_create_malware_policy(
    sut_handle, ixia_handle,
    policy_name, policy_components,
    shieldx_constants, shieldx_logger,
    datadir, pytestconfig
):
    # Initialize
    # DUT
    malware_mgmt = MalwareMgmt(sut_handle)

    # JSON Config Reader
    config_reader = CCR()
    malware_json = "malware.json"

    # Malware Payload - read config file
    resolved_input_json_file = str((datadir/malware_json).resolve())
    malware_payloads = dict(config_reader.read_json_config(resolved_input_json_file))

    # Create a new Malware Policy - QTAD-15358
    payload = malware_payloads["malware_payload"]
    shieldx_logger.info("Malware Payload - Template: {}".format(payload))
    payload["name"] = policy_name
    payload["fileActions"]["alertingThreshold"] = policy_components["alerting"]
    payload["fileActions"]["blockingThreshold"] = policy_components["blocking"]
    payload["fileActions"]["syslogThreshold"] = policy_components["syslog"]
    payload["fileActions"]["selectedMWEngine"] = policy_components["malware_engine"]
    shieldx_logger.info("Malware Payload - Create: {}".format(payload))

    policy_id = malware_mgmt.create_policy(payload)
    shieldx_logger.info("Policy ID: {}".format(policy_id))

@pytest.mark.strikes_testing
@pytest.mark.parametrize(
    "policy_name, policy_components", [
        ("WithFECloud", {"alerting": "NEVER", "blocking": "NEVER", "syslog": "NEVER", "malware_engine": "FECLOUD"}),
        ("WithSXCloud", {"alerting": "HIGH", "blocking": "HIGH", "syslog": "HIGH", "malware_engine": "FECLOUD"}),
        ("WithSXCloud", {"alerting": "HIGH", "blocking": "HIGH", "syslog": "HIGH", "malware_engine": "SXCLOUD"}),
        ("WithSXCloud", {"alerting": "NEVER", "blocking": "NEVER", "syslog": "NEVER", "malware_engine": "FECLOUD"}),
        ("WithSXCloud", {"alerting": "NEVER", "blocking": "NEVER", "syslog": "NEVER", "malware_engine": "SXCLOUD"}),
        ("WithFEAppliance", {"alerting": "CLEAN", "blocking": "NEVER", "syslog": "HIGH", "malware_engine": "FEAPPLIANCE"}),
    ]
)
def test_update_malware_policy(
    sut_handle, ixia_handle,
    policy_name, policy_components,
    shieldx_constants, shieldx_logger,
    datadir, pytestconfig
):
    # Initialize
    # DUT
    malware_mgmt = MalwareMgmt(sut_handle)

    malware_policy = dict(malware_mgmt.get_policy_by_name(policy_name))

    # Update malware policy
    malware_policy["fileActions"]["alertingThreshold"] = policy_components["alerting"]
    malware_policy["fileActions"]["blockingThreshold"] = policy_components["blocking"]
    malware_policy["fileActions"]["syslogThreshold"] = policy_components["syslog"]
    malware_policy["fileActions"]["selectedMWEngine"] = policy_components["malware_engine"]
    shieldx_logger.info("Malware Payload - Update: {}".format(malware_policy))

    policy_id = malware_mgmt.update_policy(malware_policy)
    shieldx_logger.info("Update Policy (ID): {}".format(policy_id))

@pytest.mark.strikes_testing
@pytest.mark.parametrize(
    "policy_name", [
        "WithFECloud",
        "WithFEAppliance",
    ]
)
def test_delete_malware_policy(
    sut_handle, ixia_handle,
    policy_name,
    shieldx_constants, shieldx_logger,
    datadir, pytestconfig
):
    # Initialize
    # DUT
    malware_mgmt = MalwareMgmt(sut_handle)

    # Malware Policy
    malware_policy = malware_mgmt.get_policy_by_name(policy_name)

    # Delete the Malware Policy
    if malware_policy is not None:
        policy_id = malware_policy["id"]

        is_deleted = malware_mgmt.delete_policy(policy_id)
        shieldx_logger.info("Delete Malware Policy: {}".format(is_deleted))
    else:
        shieldx_logger.error("Malware Policy not found.")

# Sample run
#  python3 -m pytest shieldxqe/test/func/test_malware.py -v --setup-show -s --shieldx --um <umip> --username <user> --password <passwd>
